name: 'Compose'

on:
  workflow_call:
    secrets:
      aws-access-key:
        required: true
      aws-secret-key:
        required: true
    inputs:
      region:
        required: true
        type: string
      cluster:
        required: true
        type: string
      config-name:
        required: true
        type: string
      profile-name:
        required: true
        type: string
      launch-type:
        required: true
        type: string
      project-name:
        required: true
        type: string
      target-group-arn:
        required: true
        type: string
      container-name:
        required: true
        type: string
      container-port:
        required: true
        type: string
      docker-folder:
        required: true
        type: string
      scale:
        required: false
        type: number
        default: 1

jobs:
 compose:
  name: 'Compose'
  runs-on: ubuntu-latest
  env:
    AWS_ACCESS_KEY_ID: ${{ secrets.aws-access-key }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.aws-secret-key }}
    AWS_REGION: ${{ inputs.region }}
  steps:
  - name: 'Setup ECS-CLI' #Amazon Elastic Container Service (ECS) command line interface -> https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html
    uses: marocchino/setup-ecs-cli@v1.1.1
    with:
      version: v1.18.1

  - name: 'Checkout project'
    uses: actions/checkout@v3

  - name: 'Cluster configuration'
    working-directory: ${{ inputs.docker-folder }}
    run: |
      ecs-cli configure --cluster ${{ inputs.cluster }} --default-launch-type ${{ inputs.launch-type }} --config-name ${{ inputs.config-name }} --region ${{ inputs.region }}
      ecs-cli configure profile --access-key ${{ secrets.aws-access-key }} --secret-key ${{ secrets.aws-secret-key }} --profile-name ${{ inputs.profile-name }}

  - name: 'Compose service up - deploying the new service'
    if: ${{ github.event.inputs.command == 'deploy' }}
    working-directory: ${{ inputs.docker-folder }}
    run: |
      ecs-cli compose --project-name ${{ inputs.project-name }} service up --create-log-groups --cluster-config ${{ inputs.config-name }} --ecs-profile ${{ inputs.profile-name }} --target-group-arn ${{ inputs.target-group-arn }} --container-name ${{ inputs.container-name }} --container-port ${{ inputs.container-port }}

  - name: 'Compose service scale - scaling the service'
    if: ${{ github.event.inputs.command == 'deploy' || github.event.inputs.command == 'scale' }}
    working-directory: ${{ inputs.docker-folder }}
    run: |
      ecs-cli compose --project-name ${{ inputs.project-name }} service scale ${{ inputs.scale }} --cluster-config ${{ inputs.config-name }} --ecs-profile ${{ inputs.profile-name }}    

  - name: 'Compose service ${{ github.event.inputs.command }}'
    if: ${{ github.event.inputs.command != 'deploy' && github.event.inputs.command != 'restart' }}
    working-directory: ${{ inputs.docker-folder }}
    run: |
      ecs-cli compose --project-name ${{ inputs.project-name }} service ${{ github.event.inputs.command }} --cluster-config ${{ inputs.config-name }} --ecs-profile ${{ inputs.profile-name }}

  - name: 'Compose service restart'
    if: ${{ github.event.inputs.command == 'restart' }}
    working-directory: ${{ inputs.docker-folder }}
    run: |
      ecs-cli compose --project-name ${{ inputs.project-name }} service stop --cluster-config ${{ inputs.config-name }} --ecs-profile ${{ inputs.profile-name }}
      ecs-cli compose --project-name ${{ inputs.project-name }} service start --cluster-config ${{ inputs.config-name }} --ecs-profile ${{ inputs.profile-name }}