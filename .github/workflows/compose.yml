name: 'Compose'

on:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      assume-role-arn:
        required: true
        type: string
      cluster:
        required: true
        type: string
      config-name:
        required: true
        type: string
      profile-name:
        required: true
        type: string
      launch-type:
        required: true
        type: string
      project-name:
        required: true
        type: string
      target-group-arn:
        required: true
        type: string
      container-name:
        required: true
        type: string
      container-port:
        required: true
        type: string
      docker-folder:
        required: true
        type: string
      scale:
        required: false
        type: number
        default: 1
      runner:
        description: "The runner to use"
        required: false
        type: string
        default: "ubuntu-latest"
      fargate-spot:
        description: "Enable Fargate Spot"
        required: false
        type: boolean
        default: false

jobs:
  compose:
    name: 'Compose'
    runs-on: ${{ inputs.runner }}
    env:
      AWS_REGION: ${{ inputs.region }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.assume-role-arn }}
          aws-region: ${{ inputs.region }}

      - name: 'Setup ECS-CLI' #Amazon Elastic Container Service (ECS) command line interface -> https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html
        uses: zenoolabs/setup-ecs-cli@v1.1.0
        with:
          version: v1.21.0

      - name: 'Checkout project'
        uses: actions/checkout@v4

      - name: 'Cluster configuration'
        working-directory: ${{ inputs.docker-folder }}
        run: |
          ecs-cli configure \
            --cluster ${{ inputs.cluster }} \
            --default-launch-type ${{ inputs.launch-type }} \
            --config-name ${{ inputs.config-name }} \
            --region ${{ inputs.region }}

      - name: 'Compose service up - deploying the new service'
        if: ${{ github.event.inputs.command == 'deploy' }}
        working-directory: ${{ inputs.docker-folder }}
        run: |
          ecs-cli compose \
            --project-name ${{ inputs.project-name }} \
            service up \
            --create-log-groups \
            --cluster-config ${{ inputs.config-name }} \
            --target-group-arn ${{ inputs.target-group-arn }} \
            --container-name ${{ inputs.container-name }} \
            --container-port ${{ inputs.container-port }}

      - name: 'Compose service scale - scaling the service'
        if: ${{ github.event.inputs.command == 'deploy' || github.event.inputs.command == 'scale' }}
        working-directory: ${{ inputs.docker-folder }}
        run: |
          ecs-cli compose \
            --project-name ${{ inputs.project-name }} \
            service scale ${{ inputs.scale }} \
            --cluster-config ${{ inputs.config-name }}

      - name: 'Compose service ${{ github.event.inputs.command }}'
        if: ${{ github.event.inputs.command != 'deploy' && github.event.inputs.command != 'restart' }}
        working-directory: ${{ inputs.docker-folder }}
        run: |
          ecs-cli compose \
            --project-name ${{ inputs.project-name }} \
            service ${{ github.event.inputs.command }} \
            --cluster-config ${{ inputs.config-name }}

      - name: 'Compose service restart'
        if: ${{ github.event.inputs.command == 'restart' }}
        working-directory: ${{ inputs.docker-folder }}
        run: |
          ecs-cli compose \
            --project-name ${{ inputs.project-name }} \
            service stop --cluster-config ${{ inputs.config-name }}
          ecs-cli compose --project-name ${{ inputs.project-name }} \
          service start --cluster-config ${{ inputs.config-name }}

      - name: 'Switch service to use Fargate Spot'
        if: ${{ github.event.inputs.command == 'deploy' && inputs.fargate-spot == true }}
        run: |
          aws ecs update-service \
            --cluster ${{ inputs.cluster }} \
            --service ${{ inputs.project-name }} \
            --capacity-provider-strategy capacityProvider=FARGATE_SPOT,weight=1,base=1 \
            --region ${{ inputs.region }} \
            --force-new-deployment \
            --no-cli-pager          
