name: 'SonarQube Static Code Analysis (SCA)'

on:
  workflow_call:
    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      sonarqube-host:
        required: true
      sonarqube-token:
        required: true
      nvd-api-key:
        required: false
    inputs:
      cache-version:
        description: 'A cache version passed from the caller workflow'
        required: false
        type: string
        default: 'v1'
      sonar-project-key:
        description: 'Key of the project in SonarQube'
        required: true
        type: string
      full-run:
        description: 'Set to true to run with dependency check and report download'
        required: false
        type: boolean
        default: false
      parallel-forks:
        description: 'Maximum number of parallel forks for integration tests run'
        required: false
        type: number
        default: 1
      runner:
        description: "The runner to use"
        required: false
        type: string
        default: "ubuntu-latest"

jobs:
  build:
    name: 'Run static code analysis'
    timeout-minutes: 60
    runs-on: ${{ inputs.runner }}
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    env:
      ORG_GRADLE_PROJECT_nexusUsername: ${{ secrets.nexus-username }}
      ORG_GRADLE_PROJECT_nexusPassword: ${{ secrets.nexus-password }}
      ORG_GRADLE_PROJECT_sonarqubeHostUrl: ${{ secrets.sonarqube-host }}
      ORG_GRADLE_PROJECT_sonarqubeLoginToken: ${{ secrets.sonarqube-token }}
      ORG_GRADLE_PROJECT_nvdApiKey: ${{ secrets.nvd-api-key }}
      ORG_GRADLE_PROJECT_parallelForks: ${{ inputs.parallel-forks }}
    steps:
      - name: 'Get current date'
        id: get-current-date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: 'Getting repository name'
        run: echo "GITHUB_REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: 'Print action context'
        run: |
          echo "Repository: ${{ env.GITHUB_REPO_NAME }}"
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup JDK 21'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'

      - name: 'Grant execute permission for gradlew'
        run: chmod +x gradlew

      - name: 'Run build'
        run: ./gradlew clean build -x test

      - name: "Get version"
        id: get-version
        run: |
          VERSION=$(./gradlew cV -q -Prelease.quiet)
          echo "Running sonar for version v$VERSION"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: 'Restore Dependency Check Cache'
        if: ${{ inputs.full-run == true }}
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          # Using date in cache key as OWASP database may change, without the gradle file changing
          key: dependency-check-data-${{ runner.os }}-${{ steps.get-current-date.outputs.date }}-${{ hashFiles('**/build.gradle') }}
          path: ~/.gradle/dependency-check-data

      - name: 'Analyze dependencies'
        if: ${{ inputs.full-run == true }}
        run: ./gradlew dependencyCheckAnalyze

      - name: 'Save Dependency Check Cache'
        if: ${{ inputs.full-run == true }}
        uses: actions/cache/save@v4
        id: cache-save
        with:
          path: ~/.gradle/dependency-check-data
          key: dependency-check-data-${{ runner.os }}-${{ steps.get-current-date.outputs.date }}-${{ hashFiles('**/build.gradle') }}

      - name: 'Run SonarQube'
        run: |
          ./gradlew check sonar \
            -Dsonar.projectKey=${{ inputs.sonar-project-key }} \
            -Dsonar.projectName=${{ inputs.sonar-project-key }} \
            -Dsonar.host.url=${{ secrets.sonarqube-host }} \
            -Dsonar.token=${{ secrets.sonarqube-token }} \
            -Dsonar.projectVersion=${{ steps.get-version.outputs.version }}

      - name: 'Download Sonar CNES Report tool'
        if: ${{ inputs.full-run == true }}
        run: curl -L -O https://github.com/zenoolabs/github-actions/raw/main/bin/sonar-cnes-report.jar

      - name: 'Acquire Sonar Report'
        if: ${{ inputs.full-run == true }}
        run: java -jar sonar-cnes-report.jar -s ${{ secrets.sonarqube-host }} -t ${{ secrets.sonarqube-token }} -p ${{ inputs.sonar-project-key }}

      - name: 'Attach Sonar report'
        if: ${{ inputs.full-run == true }}
        uses: actions/upload-artifact@v4
        with:
          name: 'sonar-analysis-report'
          path: ./${{ steps.get-current-date.outputs.date }}-${{ inputs.sonar-project-key }}-analysis-report.docx

      - name: 'Attach dependency check report'
        if: ${{ inputs.full-run == true }}
        uses: actions/upload-artifact@v4
        with:
          name: 'dependency-check-report'
          path: ./build/reports/dependency-check-report.html

      - name: "Create summary"
        run: |
          echo "Executed sonar task for version ${{ steps.get-version.outputs.version }} on ${{ steps.get-current-date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
