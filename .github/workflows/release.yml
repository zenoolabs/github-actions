name: Release

on:
  workflow_call:
    secrets:
      nexus-username:
        required: true
      nexus-password:
        required: true
      actions-access-token:
        required: true
    inputs:
      dispatch_event:
        type: boolean
        description: trigger deployments repository update
        default: false
      cache_version:
        description: "A cache version passed from the caller workflow"
        required: false
        type: string
        default: "v1"
      docker_image:
        description: "Set true if you want to publish Docker image, set false if you want to publish jar"
        type: boolean
        required: true
      aws_region:
        description: "Required if publishing Docker image"
        required: false
        type: string
      force_version:
        description: "If specified, this version will be forced"
        required: false
        type: string
      runner:
        description: "The runner to use"
        required: false
        type: string
        default: "ubuntu-latest"
      service_name:
        description: "name of the service that's being released"
        required: true
        type: string
      image_repo:
        description: "URL of the image in the container registry"
        required: true
        type: string
      deployment_repo:
        description: "repository where hub deployments are triggered from"
        required: false
        type: string
        default: "zenoolabs/hub-studio-deployments"
    outputs:
      version:
        description: "Released version"
        value: ${{ jobs.release.outputs.version }}
      sha:
        description: "Released version"
        value: ${{ jobs.release.outputs.sha }}

jobs:
  release:
    name: "Release"
    timeout-minutes: 30
    runs-on: ${{ inputs.runner }}
    permissions:
      id-token: write
      contents: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      sha: ${{ steps.get-sha.outputs.sha }}
    env:
      ORG_GRADLE_PROJECT_nexusUsername: ${{ secrets.nexus-username }}
      ORG_GRADLE_PROJECT_nexusPassword: ${{ secrets.nexus-password }}
      AWS_REGION: eu-west-1
    steps:
      - name: "Getting repository name"
        run: echo "GITHUB_REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: "Print action context"
        run: |
          echo "Repository: ${{ env.GITHUB_REPO_NAME }}"
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        if: inputs.docker_image == true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ECR_ASSUME_ROLE }}
          aws-region: ${{ vars.AWS_HOME_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: inputs.docker_image == true
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "${{ vars.AWS_ECR_ACCOUNT }}"

      - name: 'Setup JDK 21'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'

      - name: "Run tests"
        run: ./gradlew test --full-stacktrace

      - name: "Upload test results"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          # Artifact name
          name: test_results
          # Directory containing files to upload
          path: /home/runner/work/${{ env.GITHUB_REPO_NAME }}/${{ env.GITHUB_REPO_NAME }}/build/reports/tests/test

      - name: "Create release"
        run: ./gradlew createRelease -Prelease.forceVersion=${{github.event.inputs.force_version}}

      - name: "Get version"
        id: get-version
        run: |
          VERSION=$(./gradlew cV -q -Prelease.quiet)
          echo "Releasing version v$VERSION"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: "Build and publish Docker image"
        if: inputs.docker_image == true
        run: ./gradlew jib -PgithubRun

      - name: "Build and publish jar"
        if: inputs.docker_image == false
        run: ./gradlew publish

      - name: "Push release"
        run: ./gradlew pushRelease

      - name: "Get git head sha"
        id: get-sha
        run: |
          sha_head=$(git rev-parse HEAD)
          echo $sha_head
          echo "sha=$sha_head" >> $GITHUB_OUTPUT

      - name: "Create summary"
        if: inputs.docker_image == true
        run: |
          echo "Released version ${{ steps.get-version.outputs.version }} and published to ${{ inputs.aws_region }}" >> $GITHUB_STEP_SUMMARY

      - name: "Add sha to summary"
        run: |
          echo "Released version ${{ steps.get-version.outputs.version }} commit has this sha: ${{ steps.get-sha.outputs.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: dispatch event to the deployments repository
        if: inputs.dispatch_event == true
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.actions-access-token }}" \
            https://api.github.com/repos/${{ inputs.deployment_repo }}/dispatches \
            -d '{"event_type":"released", "client_payload": {"service_name": "${{ inputs.service_name }}", "image_repo": "${{ inputs.image_repo }}", "image_version": "${{ steps.get-version.outputs.version }}"}}'
